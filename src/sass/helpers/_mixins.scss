//MIXINS

@mixin gp($position, $color1, $color2){
	background-image: linear-gradient($position, $color1, $color2);
}

//border-radius
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}

//box-shadow
@mixin bs($shadow){
	-webkit-box-shadow: $shadow;
	-moz-box-shadow: $shadow;
	-ms-box-shadow: $shadow;
	-o-box-shadow: $shadow;
	box-shadow: $shadow;
}
//text-shadow
@mixin ts($string){
	-webkit-box-shadow: $string;
	-moz-box-shadow: $string;
	-ms-box-shadow: $string;
	-o-box-shadow: $string;
	box-shadow: $string;
}
@mixin coverdiv{
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

@mixin cover{
	background-repeat: no-repeat;
	background-size: cover;
	background-position: 50% 50%;
}

@mixin bgFixed{
	background-repeat: no-repeat;
	background-size: contain;
	background-position: 50% 50%;
	background-attachment: fixed;
}

// vertical-align at center
@mixin vcenter{
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%,-50%);
}
@mixin vy{
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}
@mixin vx{
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}


//transition
@mixin tr($time: .35s, $what: all, $why: ease) {
	-webkit-transition: $what $time $why;
	-moz-transition: $what $time $why;
	-ms-transition: $what $time $why;
	-o-transition: $what $time $why;
	transition: $what $time $why;
}

//text-overflow
@mixin text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

//vcenter
@mixin vcenter{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
}

//transform: translateY
@mixin trfY($num){
    transform: translateY($num);
}

//transform: translateX
@mixin trfX($num){
    transform: translateX($num);
}

//Counter
@mixin counter($var){
    counter-reset: $var;
        & > li, & > dt{
            &:before{
                content: counter($var);
                counter-increment: $var;
            }
        }
}

//Placeholder
@mixin placeholder-color($color){
	&::placeholder{
		color: $color;
	}
}

@mixin placeholder{
	&:-ms-input-placeholder{
		@content;
	}
	&:-moz-placeholder{
		@content;
	}
	&::-moz-placeholder{
		@content;
	}
	&::-webkit-input-placeholder{
		@content;
	}
	&::placeholder{
		@content;
	}
}


//No select
@mixin unselectable{
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}
@mixin nosel{
	@include unselectable;
}

//Scroll
@mixin scroll{
	overflow-y: auto;
	-webkit-overflow-scrolling:touch;
}

//Scroll Bar
@mixin scrollbar{
	&::-webkit-scrollbar{
		@content;
	}
}
@mixin scrollbar-track{
	&::-webkit-scrollbar-track{
		@content;
	}
}
@mixin scrollbar-thumb{
	&::-webkit-scrollbar-thumb{
		@content;
	}

}
@mixin scrollbar-track-piece{
	&::-webkit-scrollbar-track-piece{
		@content;
	}
}

//triangle
//Triangel
@mixin arr($width, $height, $bg, $direction){
    width: 0px;
    height: 0px;
    border-style: solid;
    @if $direction == t{
        border-width: 0 $width / 2 + px $height + px $width / 2 + px;
        border-color: transparent transparent $bg transparent;
    }
    @if $direction == r{
        border-width: $height / 2 + px 0 $height / 2 + px $width + px;
        border-color: transparent transparent transparent $bg;
    }
    @if $direction == b{
        border-width: $height + px $width / 2 + px 0 $width / 2 + px;
        border-color: $bg transparent transparent transparent;
    }
    @if $direction == l{
        border-width: $height / 2 + px $width + px $height / 2 + px 0;
        border-color: transparent $bg transparent transparent;
    }
    @if $direction == tl{
        border-width: $height + px $width + px 0 0;
        border-color: $bg transparent transparent transparent;
    }
    @if $direction == tr{
        border-width: 0 $width + px $height + px 0;
        border-color: transparent $bg transparent transparent;
    }
    @if $direction == br{
        border-width: 0 0 $height + px $width + px;
        border-color: transparent transparent $bg transparent;
    }
    @if $direction == bl{
        border-width: $width + px 0 0 $height + px;
        border-color: transparent transparent transparent $bg;
    }
}

@mixin beforearr($color: #fff, $direction: t, $width: 12, $height: 6){
    &::before{
        content: '';
        display: block;
        position: absolute;
        top: -6px;
        left: 20px;
        margin-left: -6px;
        @include arr($width, $height, $color, $direction);
    }

}

// font-family
@mixin font($alias, $family, $name){
	@font-face{
		font-family: $alias;
		src: url("../fonts/" + $family + "/" + $name + ".eot") format("eot"),
			 url("../fonts/" + $family + "/" + $name + ".ttf") format("ttf"),
			 url("../fonts/" + $family + "/" + $name + ".woff2") format("woff2"),
			 url("../fonts/" + $family + "/" + $name + ".woff") format("woff");
		font-weight: normal;
		font-style: normal;
	}
}

@mixin respond-to($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@media (max-width: #{map-get($breakpoints, $breakpoint)}) {
			@content;
		}
	}

	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
		+ "Please make sure it is defined in `$breakpoints` map.";
	}
}

@mixin respond-min($breakpoint) {
    @if map-has-key($breakpointsMin, $breakpoint) {
        @media (min-width: #{map-get($breakpointsMin, $breakpoint)}) {
            @content;
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}
